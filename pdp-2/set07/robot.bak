;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname robot) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f ())))
;; Filename: robot.rkt
;; Algorithm:

;; The algorithm for this problem is BFS, every loop discovers new positions
;; reachable from the positions the robot can currently get to, and records all
;; the edges as the steps, once the target position is reached or the robot
;; can not discover new positions anymore, we can get the plan from the target 
;; position back to the start position. Or just return false, iff the robot can
;; not find the given target position.


(require "extras.rkt")
(require rackunit)
(require "sets.rkt")

(provide path)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; CONSTANTS

(define NORTH "north")
(define SOUTH "south")
(define EAST "east")
(define WEST "west")

(define MV-E (list EAST 1))
(define MV-S (list SOUTH 1))
(define MV-W (list WEST 1))
(define MV-N (list NORTH 1))

(define RIGHT-FRAME 1)
(define BOTTOM-FRAME -1)
(define TOP-FRAME 2)
(define LEFT-FRAME -2)

(define DIRECTION-LST (list NORTH SOUTH WEST EAST))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; DATA DEFINITION

;; A Position is a (list PosInt PosInt)
;; Interp: (x y) represents the position at position x, y.

;; TEMPLATE
;; p-fn: Position -> ??
;; (define (p-fn p)
;;   (... (first p)
;;        (second p)))


;; A ListOfPosition is one of
;; -- empty
;; -- (cons Position ListOfPosition)
;; WHERE: the PositionSet is a list of positions without duplication

;; TEMPLATE
;; TEMPLATE
;; ps-fn : PositionSet -> ListOfPosition
;; (define (ps-fn ps)
;;   (cond
;;     [(empty? ps) ...]
;;     [else (... (p-fn (first ps))
;;                (ps-fn (rest ps)))]))

;; A Block is a ListOfPosition
;; Interp: Block represents the list of positions which robot can Not 
;; pass through.

;; A Direction is one of
;; -- NORTH   interp: represents the current direction is north
;; -- EAST    interp: represents the current direction is east
;; -- SOUTH   interp: represents the current direction is south
;; -- WEST    interp: represents the current direction is west

;; TEMPLATE
;; d-fn : Direction -> ??
;; (define (d-fn d)
;;   (cond
;;     [(string=? d NORTH) ...]
;;     [(string=? d EAST) ...]
;;     [(string=? d SOUTH) ...]
;;     [(string=? d WEST) ...]))

;; direction?: Any -> Boolean
;; GIVEN: Any
;; RETURNS: true iff the given arg is a direction
;; EXAMPLES: (direction? "yes") -> false
;; STRATEGY: function composition
(define (direction? d)
  (and
    (string? d)
    (or
      (string=? d NORTH)
      (string=? d SOUTH)
      (string=? d EAST)
      (string=? d WEST))))

;; A ListOfDirection (LOD) is one of
;; -- empty
;; -- (cons Direction LOD)

;; TEMPLATE
;; lod-fn : LOD ->??
;; (define (lod-fn lod)
;;   (cond
;;     [(empty? lod) ...]
;;     [else (... (d-fn (first lod))
;;                (lod-fn (rest lod)))]))

;; A Step is a (list Position Position)
;; Interp: 
;; a step is a list containing two positions, representing a step from the 
;; first position to second position, except for the start position, a step
;; can be (list start start), every step else must be (list p1 p2), where p2 is 
;; just 1 step away from p1, for example, p1: (list a b), p2: (list c d),
;; then either (abs (- a c)) = 1 and (abs (- b d)) = 0
;;          or (abs (- a c)) = 0 and (abs (- b d)) = 1

;; TEMPLATE
;; s-fn : Step -> ??
;; (define (s-fn s)
;;   (... (p-fn (first s))
;;        (p-fn (second s))))


;; A NEListOfStep (NELOS) is one of
;; -- (cons Step empty)
;; -- (cons Step ListOfStep)

;; TEMPLATE
;; nelos-fn : NELOS -> ??
;; (define (nelos-fn nelos)
;;   (cond
;;     [(empty? (rest nelos)) 
;;      (... (s-fn (first nelos)))]
;;     [else (... (s-fn (first nelos))
;;                (los-fn (rest nelos)))]))

;; A Path is a NEListOfStep
;; Interp:
;; a path is a non empty list of steps, where in each step, its first 
;; position equals the second position of the previous step (if exists) 
;; and its second position equals the first position of the next 
;; step (if exists).


;; A RightOrBottomFrame is one of
;; -- RIGHT-FRAME
;; -- BOTTOM-FRAME
;; Interp:
;; The two frames and two lines x=0 y=0 make a rectangle that the robot
;; should moved within to find the target position iff there exists a way 
;; from the start position to. Since the positions are only infinite to east 
;; and south, so we can just calculate the right-frame and the bottom-frame 
;; to make sure the robot will not go too far.

;; TEMPLATE
;; frame-fn : RightOrBottomFrame -> ??
;; (define (frame-fn f)
;;   (cond
;;     [(= f RIGHT-FRAME) ...]
;;     [(= f BOTTOM-FRAME) ...]))

;; A Move is a (list Direction PosInt)
;; Interp: a move of the specified number of steps in the indicated
;; direction. 

;; TEMPLATE
;; mov-fn : Move -> ??
;; (define (mov-fn mov)
;;   (... (d-fn (first mov))
;;        (second mov)))


;; A ListOfMove (LOM) is one of 
;; -- empty
;; -- (cons Move LOM)

;; TEMPLATE
;; lom-fn : LOM -> ??
;; (define (lom-fn lom)
;;   (cond
;;     [(empty? lom) ...]
;;     [else (... (mov-fn (first lom))
;;                (lom-fn (rest lom)))]))

;; A Plan is a ListOfMove
;; WHERE: the list does not contain two consecutive moves in the same
;; direction.

;; A NEListOfMove (NELOM) is a (cons Move LOM)

;; TEMPLATE
;; nelom-fn :  -> ??
;; (define (nelom-fn nelom)
;;   (... (mov-fn (first rp))
;;        (lom-fn (rest rp))))

;; A RealPlan is a NEListOfMove

;; A MaybePlan is one of:
;;  --false
;;  --RealPlan
;; Interp:
;;  false iff there's not a way from the start position to the target position
;;  RealPlan as interpreted before, representing there's a plan containing at
;;  least one step

;; Template:
;; (define (mp-fn mp)
;;   (cond
;;     [(false? mp) ...]
;;     [(real-plan? mp) ...]))

;; plan?: LOMV -> Boolean
;; GIVEN: a LOMV
;; WHERE: the LOMV) is not empty
;; RETURNS: true iff the given list of move is a plan
;; EXAMPLES: (plan? (list (list EAST 1))) -> true
;; STRATEGY: HOFC
(define (plan? pl)
  (andmap
    move?
    pl))

;; move?: List -> Boolean
;; GIVEN: a list
;; RETURNS: true iff the given list is a move
;; EXAMPLES: (move? (list 1 1)) -> false
;; STRATEGY: structure decomposition on List
(define (move? mv)
  (and
    (not (empty? mv))
    (direction? (first mv))
    (and (integer? (second mv))
         (> (second mv) 0))))

;; real-plan?: LOMV -> Boolean
;; GIVEN: a LOMV
;; RETURNS: true iff the given LOMV is a RealPlan
;; EXAMPLES: (real-plan? false) -> false
;; STRATEGY: function composition
(define (real-plan? pl)
  (cond
    [(empty? pl) false]
    [else (plan? pl)]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Examples for testing


(define block-example 
  (list (list 1 2) (list 1 3) (list 3 2) 
        (list 3 4) (list 4 1) (list 4 4)))

(define block-reachable 
  (list (list 4 1) (list 4 2) (list 4 3) (list 4 4)
        (list 1 2) (list 2 2) (list 3 5)))

(define block-non-reachable 
  (list (list 4 1) (list 4 2) (list 4 3) (list 4 4)
        (list 1 2) (list 2 2) (list 3 2) (list 3 5)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; findpath: Position Block Path -> Path 
;; GIVEN: a position, a block and a path
;; WHERE: 1)the position is the target position to stop
;;        2)the visited is  a path containing steps the robot has discovered
;; RETURNS: all the steps the robot can discover
;; HALTING MEASURE: ?????????
;; TERMINATION ARGUMENT: the target position is the second member of one of 
;; the step in visited, or the visited does NOT change anymore
;; EXAMPLES: (findpath (list 2 1) empty (list (list (list 1 1) (list 1 1))))
;;           -> (list (list (list 1 1) (list 1 2)) 
;;                    (list (list 1 1) (list 2 1)))
;; STRATEGY: function composition
(define (findpath ep bls visited)
  (cond
    [(exist-pos-in-visited? ep visited) visited]
    [else (if (subset? (add-new-visited ep bls visited) visited)
              visited
              (findpath ep bls (add-new-visited ep bls visited)))]))


;; add-new-visited: Position Block Path -> Path
;; GIVEN: a position, a block and a path
;; WHERE: 1)the position is the target position
;;        2)the visited is a path containing steps the robot has discovered 
;; RETURNS: add all new steps that can be get within one step from the
;; positons exist in given path
;; EXAMPLES: (add-new-visited (list 2 1) empty 
;;                            (list (list (list 1 1) (list 1 1)))) -> 
;;           (list (list (list 1 1) (list 1 2)) 
;;                 (list (list 1 1) (list 2 1)))
;; STRATEGY: HOFC
(define (add-new-visited ep bls visited)
  (foldr
   (lambda (p ans)
     (new-neighbor-add-for-pos p ep bls ans))
   visited
   visited))


;; new-neighbor-add-for-pos: Position Position Block Path -> Path
;; GIVEN: a position, another position, a block and a path
;; WHERE: 1)the first position is the start position
;;        2)the second position is the target position
;;        3)the visited is a path containing steps the robot has discovered
;; RETURNS: the given path add all new steps that is reachable within one step
;; EXAMPLES: (new-neighbor-add-for-pos 
;;             (list 1 1) (list 2 1) empty
;;             (list (list (list 1 1) (list 1 1)))) ->
;;           (list (list (list 1 1) (list 1 2)) 
;;                   (list (list 1 1) (list 2 1)))
;; STRATEGY: function composition
(define (new-neighbor-add-for-pos p ep bls visited)
  (set-union visited (new-neighbor-for-pos p ep bls visited)))

;; new-neighbor-for-pos: Position Position Block Path -> Path
;; WHERE: 1)the first position p is start position
;;        2)the second position is the target position
;;        3)the visited is a path containing steps the robot has discovered
;; RETURNS: a list of steps containing all the steps the robot can
;; go at the given start position
;; EXAMPLES: (new-neighbor-for-pos 
;;             (list 1 1) (list 2 1) empty
;;             (list (list (list 1 1) (list 1 1)))) ->
;;           (list (list (list 1 1) (list 1 1))
;;                 (list (list 1 1) (list 1 2))
;;                 (list (lsit 1 1) (list 2 1)))
;; STRATEGY: HOFC
(define (new-neighbor-for-pos p ep bls visited)
  (foldr
    ;; Direction Path -> Path
    ;; GIVEN: a direction and a path
    ;; RETURNS: the given path add the step from the given start position
    ;; to the given direction iff the robot can go
   (lambda (d ans)
     (if (check-pos (pos-by-move (second p) d) ep bls visited)
         (cons (list (second p) (pos-by-move (second p) d)) ans)
         ans))
   empty
   DIRECTION-LST))

;; get-pos-from-path: Position Path -> Path
;; GIVEN: a positon and a path
;; WHERE: 1)visited is the step the robot has already discovered
;;        2)the given position MUST exist as the second position of one step
;;        in given path
;; RETURNS: a step whose second position is the given position
;; EXAMPLES: (get-pos-from-path (list 1 1) (list (list (list 1 1) (list 1 1))))
;;           -> (list (list 1 1) (list 1 1))
;; STRATEGY: HOFC
(define (get-pos-from-path pos visited)
  (foldr
    ;; Step Path -> Step
    ;; GIVEN: a position and a path
    ;; RETURNS: the given step iff its second position equals the 
    ;; given position
    (lambda (s ans)
      (if (equal? (second s) pos)
          s
          ans))
    empty
    visited))

;; get-plan-from-path-first: Position Position Path -> MaybePlan
;; GIVEN: two positions as start and target and a path
;; WHERE: 1)the first position is the start position
;;        2)the second position is the target position
;;        3)the path contains all the steps the robot can go, the path MUST
;;        contains a step as (list start start)
;; RETURNS: false iff there's no step in the path whose second position is 
;; the given target,  else a realplan from the given start position to
;; the given target position
;; EXAMPLES: (get-plan-from-path-first 
;;             (list 1 1) (list 3 3)
;;             (list (list (list 1 1) (list 1 1)))) -> false
;; STRATEGY: function composition
(define (get-plan-from-path-first sp ep path)
  (if (not (exist-pos-in-visited? ep path))
      false
      (get-plan-from-path sp ep path
        (list (list (direction-from-step (get-pos-from-path ep path)) 1)))))

;; get-plan-from-path: Position Position Path RealPlan -> RealPlan
;; GIVEN: two positions, a path and a realplan
;; WHERE: 1)sp is the start position
;;        2)ep is the current position
;;        3)the given path contains all the steps the robot can go
;;        4)the realplan contains the step from the current position to the 
;;        original target position
;; RETURNS: a realplan containing moves from the position one step 
;; previous to the current position to the original position
;; EXAMPLES: (get-plan-from-path
;;             (list 1 1) (list 2 1)
;;             (list (list (list 1 1) (list 1 1))
;;                   (list (list 1 1) (list 1 2))
;;                   (list (list 1 1) (list 2 1)))
;;             (list (list EAST 1))) -> (list (list EAST 1))
;; STRATEGY: structure decomposition on Step
(define (get-plan-from-path sp cp path plan)
  (if (equal? (first (get-pos-from-path cp path)) sp)
      plan
      (get-plan-from-path 
        sp 
        (first (get-pos-from-path cp path))
        path
        (update-plan plan (get-pos-from-path cp path)))))

;; update-plan: Plan Step -> RealPlan
;; GIVEN: a realplan and a step
;; RETURNS: a realplan containing moves from the first position of the 
;; given step to the original target
;; EXAMPLES: (update-plan (list (list SOUTH 1))
;;                        (list (list (list 2 3) (list 2 4)))) ->
;;           (list (list SOUTH 2))
;; STRATEGY: structure composition on RealPlan
(define (update-plan plan s)
  (if (direction-same? (direction-from-step s) (first plan))
      (update-plan-first-one plan)
      (add-new-plan plan (direction-from-step s))))


;; direction-same?: Direction Move -> Boolean
;; GIVEN: a direction and a move
;; RETURNS: true iff the given direction equals to the direction of the move
;; EXAMPLES: (direction-same? NORTH (list NORTH 1)) -> true
;; STRATEGY: structure decomposition on Move
(define (direction-same? d move)
  (string=? d (first move)))

;; update-plan-first-one: RealPlan -> RealPlan
;; GIVEN: a realplan
;; RETURNS: the first move in the given plan is updated, whose second 
;; member is added by 1
;; EXAMPLES: (update-plan-first-one (list (list EAST 1)))
;;           -> (list (list EAST 2))
;; STRATEGY: structure decomposition on RealPlan
(define (update-plan-first-one plan)
  (cons (update-move-add-one-step (first plan))
        (rest plan)))

;; update-move-add-one-step: Move -> Move
;; GIVEN: a move
;; RETURNS: the given move updated for its second member(added by 1)
;; EXAMPLES: (update-move-add-one-step (list EAST 1)) -> (list EAST 2)
;; STRATEGY: structure decomposition on move : Move
(define (update-move-add-one-step move)
  (list (first move) (+ 1 (second move))))

;; add-new-plan: RealPlan Direction -> RealPlan
;; GIVEN: a realplan and a direction
;; RETURNS: the given realplan added by a move towards the given direction with
;;         length 1 to the head
;; EXAMPLES: (add-new-plan (list (list EAST 1)) NORTH)
;;           -> (list (list NORTH 1))
;; STRATEGY: function composition
(define (add-new-plan plan d)
  (cons (list d 1) plan)) 

;; direction-from-step: Step -> Direction
;; GIVEN: a step
;; RETURNS: a direction
;; EXAMPLES: (direction-from-step (list (list 1 1) (list 1 2))) -> SOUTH 
;; STRATEGY: structure decomposition on step : Step
(define (direction-from-step step)
  (direction-by-pos (first step) (second step)))

;; direction-by-pos: Position Position -> Direction
;; GIVEN: two positions
;; WHERE: 1)the first position is a start position
;;        2)the second position is a target position 
;; RETURNS: the direction from the start position to the target position
;; EXAMPLES: (direction-by-pos (list 1 1) (list 1 2)) -> SOUTH
;; STRATEGY: structure decomposition on Position
(define (direction-by-pos p1 p2)
  (direction-by-vector 
    (- (first p2) (first p1)) 
    (- (second p2) (second p1))))

;; direction-by-vector: PosInt PosInt -> Direction
;; GIVEN: two PosInt 
;; WHERE: 1)the first positive integer is the vector's x-value
;;        2)the secon position integer is the vector's y-value
;; RETURNS: the direction the given vector towards to
;; EXAMPLES: (direction-by-vector 1 0) -> EAST  
;; STRATEGY: function composition
(define (direction-by-vector vx vy)
  (cond
    [(and (= 1 vx) (= 0 vy)) EAST]
    [(and (= 0 vx) (= 1 vy)) SOUTH]
    [(and (= -1 vx) (= 0 vy)) WEST]
    [(and (= 0 vx) (= -1 vy)) NORTH]))

;; pos-by-move: Position Direction -> Position
;; GIVEN: a position and a direction
;; RETURNS: the position which is a step away to the given position at the 
;; given direction 
;; EXAMPLES: (pos-by-move (list 1 1) EAST)-> (list 2 1)
;; STRATEGY: structure decomposition on d : Direction
(define (pos-by-move p d)
  (cond
    [(string=? d NORTH) (list (first p) (- (second p) 1))]
    [(string=? d SOUTH) (list (first p) (+ (second p) 1))]
    [(string=? d WEST) (list (- (first p) 1) (second p))]
    [(string=? d EAST) (list (+ (first p) 1) (second p))]))

;; exist-pos-in-visited?: Position Path -> Boolean 
;; GIVEN: a position and a path
;; RETURNS: true iff the given position is is the second position of one step
;; in the given path
;; EXAMPLES: (exist-pos-in-visited? 
;;             (list 1 1) 
;;             (list (list (list 1 1) (list 1 1)))) -> true
;; STRATEGY: structure decomposition on s : Step
(define (exist-pos-in-visited? p0 visited)
  (ormap
    ;; Step -> Boolean
    ;; GIVEN: a Step
    ;; RETURNS: true iff the given step's second position is equal to the 
    ;; the given position
   (lambda (s)
     (equal? p0 (second s)))
   visited))

;; check-pos: Position Position Block Path -> Boolean
;; GIVEN: a position, another position, a block and a path
;; WHERE: 1)the first position is the position needed to be checked
;;        2)the second position is target position
;;        3)path contains the current step the robot has discovered
;; RETURNS: true iff the position is not in the block and not visited, 
;; and also the given position should be in the reasonable frame, whose 
;; top and left edge is y=0 and x=0, right and bottom edge is calculated 
;; by function find-frame below
;; EXAMPLES: (checked (list 1 1) (list 2 1) empty
;;                    (list (list (list 1 1) (list 1 1)))) -> false
;; STRATEGY: structure decomposition on p : Position
(define (check-pos p ep bls visited)
  (and (> (first p) 0)
       (> (second p) 0)
       (<= (first p) (find-frame (set-cons ep bls) RIGHT-FRAME))
       (<= (second p) (find-frame (set-cons ep bls) BOTTOM-FRAME))
       (not (exist-pos-in-visited? p visited))
       (not (my-member? p bls))))

;; find-frame: LOP RightOrBottomFrame-> PosInt
;; GIVEN: a list of positions and a frame
;; WHERE: 1)the given list positions contains a Block and the target position
;;        2)the given RightOrBottomFrame indicates which frame needed 
;;        calculating
;; RETURNS: the max y-pos in the given lop plus 1 iff calculating bottom-frame,
;; or the max x-pos in the given lop plus 1 iff the calculating right-frame
;; EXAMPLES: (find-frame (list (list 1 1) (list 2 1)) RIGHT-FRAME) -> 3
;; STRATEGY: structure decomposition on Position
(define (find-frame lop f)
  (+ 1 (foldr
        ;; Position PosInt -> PosInt
        ;; GIVEN: a position and the current frame
        ;; RETURNS: max one of x-pos of givne position and current frame iff for 
        ;; right-frame, or max one of y-pos of given position and 
        ;; current frame iff for bottom-frame
        (lambda (p ans)
          (cond
            [(= f RIGHT-FRAME) (max (first p) ans)]
            [(= f BOTTOM-FRAME) (max (second p) ans)]))
        0
        lop)))

;; path: Position Position Block -> MaybePlan
;; GIVEN: two position and a block
;; WHERE: the first position is the start position
;; AND the second position is the target position
;; RETURNS: false iff there's no path from the start position to the target
;; position, or return a plan from the start position to the target position
;; EXAMPLES: (path (list 1 1) (list 2 1) empty) -> (list (list "east" 1))
;; STRATEGY: function composition
(define (path sp ep bls)
  (get-plan-from-path-first sp ep
    (findpath ep bls (list (list sp sp)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(path (list 1 1) (list 5 2) block-reachable)
;; (path (list 1 1) (list 8 6) block-non-reachable)

;; TESTS

(begin-for-test
  (check-equal? (path (list 1 1) (list 5 2) block-reachable)
                '(("east" 1) ("south" 2) ("west" 1) 
                  ("south" 3) ("east" 3) ("north" 5))
                "should return a path, but does NOT")
  (check-equal? (path (list 1 1) (list 8 6) block-non-reachable)
                false
                "should return a false, but does NOT"))












